/*
    You are given an array arr[] of N integers including 0. The task is to find the smallest positive number missing from the array.
    Example 1:
        Input: N = 5 arr[] = {1,2,3,4,5}
        Output: 6
        Explanation: Smallest positive missing number is 6.
    Example 2:
        Input: N = 5 arr[] = {0,-10,1,3,-20}
        Output: 2
        Explanation: Smallest positive missing number is 2.
    Your Task:
    The task is to complete the function missingNumber() which returns the smallest positive missing number in the array.

    Expected Time Complexity: O(N).
    Expected Auxiliary Space: O(1).

    Constraints:
    1 <= N <= 106
    -106 <= arr[i] <= 106
*/

/*
    For only positive numbers it is so easy just use index to store its presence but in case of negative numbers it becomes a little tricky.
    So what we have to do is shift all negative numbers in left side and positive on right and keep index of 1st positive integer this can be done in O(n) as we dont
    need to sort them just swap them. and after that treat the right half as you would treat your only positive array
*/
// Code
 int segregate(vector<int>& v){
        int j = 0;
        for(int i = 0; i<v.size(); i++){
            if(v[i]<=0){
                swap(v[i], v[j]);
                j++;
            }
        }
        return j;
    }
    int findPositive(vector<int> v, int j){
        for(int i = j; i<v.size(); i++){
            if(abs(v[i])-1 < v.size()-j && v[abs(v[i])-1+j] > 0)
                v[abs(v[i])-1+j] *= -1;
                
        }
        for(int i = j; i<v.size(); i++){
            if(v[i] > 0)
                return i-j+1;
        }
        return v.size()-j+1;
    }
    int missingNumber(int arr[], int n){
        vector<int> v(arr, arr+n);
        int j = segregate(v);
        return findPositive(v, j);
    }
 
